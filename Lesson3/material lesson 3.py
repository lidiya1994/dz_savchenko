        #Строки. Их реализация в Питон

#Строки - упорядоченные неизменяемые последовательности символов, используемые для хранения и представления текстовой информации,
# поэтому с помощью строк можно работать со всем, что может быть представлено в текстовой форме

#Строки можно созавать несколькими спосабами:

#1.С помощью одинарных и двойных кавычек.

#first_string = 'Я текст в одинарных кавычках'
#second_string = "Я текст в двойных кавычках"

#Строки в одинарных и двойных кавычках-одно и то же. Причина наличия двух вариантовв том,
#чтобы позволить вставлять в строки символы кавычек. Например вот так(обратите внимание на кавычки внутри строки)

#first_string = 'слово "python" обычно подразумевает змею'
#second_string = "I'm learning Python"

#2.С помощью тройных кавычек.
#Главное достоинство строк в тройных кавычках в том,что их можно использовать для записи многострочных блоков текста.Внутри
#такой строки возможно присуствие кавычек и апострофов, главное, чтобы не было трех кавычек подряд

my_string = '''Это очень длинная строка, ей нужно много места'''
print(my_string)

#3.С помощью метода str()
my_num =12345
my_str =str(my_num)

#В данном случае мы создали новую строку путем конвертации переменной другого типа( например,int)


#1оператор сложение строк
a='Вот так работает'
b=' контатенация строк'
print(a+b)

#2оператор умножения строк
str='строка '
print(5*str)
'строка строка строка строка строка'

#3Длина строки
str='Строка'
print(len(str))

#Срезы и построки
s='hello'
print(s[2], s[4], s[-3])

#2Второй тип-срез с двумя параметрами.Т.е.S[a:b]возвращает подстроку,начиная с символа с индексом a до символа b, не включая его.
#Если опусить его

s='hello'
print(s[0:4], s[1:3], s[1:])
s='hello'
print(s[-4:-1],s[1:3],s[1:])

#Срез с тремя параматрами-S[a:b:c]
s='hello'
print(s[0:5:1],s[::1],s[0:5:2], s[::2])

s='homework'
print(s[0:3:1], s[::1], s[2:4:3],s[::3])



    #Срезы.Подстроки
#Срез (slice)— извлечение из данной строки одного символа или некоторого фрагмента подстроки или подпоследовательности.

#Индекс- номер символа в строке (а также в других структурах данных: списках, кортежах, массивах). Обратите внимание,
#что нумерация начинается с.Если указать отрицательное значение индекса,то номер будет отсчитываться с конца, начиная с номера-1.

#1.Самая простая форма среза-взятие одного символа строки-S[i],где S-строка,i-индекс

s = 'Hello'
print(s[0],s[4],s[-5])

#2.Второй тип-срез с двумя параметрами.Т.е S[a:b]
#Возвращает подстроку,начиная с символа с индексом a до символас индексом b,не включая его. Если опустить второй параметр
#(но поставить двоеточие), то срез берется до конца строки

s = 'Hello'
print(s[0:4],s[1:3],s[1:])

#3.Срез с тремя параметрами-S[a:b:d].Третий парметр задает шаг, то есть будут взяты символы с интексами a,a+d,a+2*d
#Например, при задании  значения третьего параметра, равному 2, в срез пападаеткаждый второй символ:

s = 'Hello'
print(s[0:5:1],s[::1],s[0:5:2],s[::2])



s='hello everyboby'
s_2='Hello Everyboby'
s_3='Hello everyboby'
#Делаем строку заголовка
print (s.title())

#Начинаем строку с заглавной буквы
print(s.capitalize())

#Переводим строку в верхний регистр
print(s.upper())

#Переводим строку в нижний регистр
print(s.lower())

#Инверсия регистра
print(s_2.swapcase())

#Проверяем, являются ли строки заголовками
print(s.istitle())
print(s_2.istitle())
print(s_3.istitle())

print('..'.join(['a','b']))# создает строку
print('1_2_3'.split('_'))# разбивает строку на список
print('1,2,3'.split(','))
print('1_2_3'.split('2'))

s='hello work'
print(s[::3])
print(s[0]+s[-1])
print(s.upper())

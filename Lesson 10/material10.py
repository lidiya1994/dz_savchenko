#Множества в Python - это структура данных, которые содержат неупорядочнные элементы.
#Элементы также не являются индексированным. Как и список, множество позволяет внесениеи
#удаление элементов. Однако , есть ряд особенных характеристик, которые определяют и отделяют
#множество от других структур данных.

#Множество не содержит дублекаты элементов;

#Элементы множества являются неизменными(их нельзя менять),однако само по себе множество
#является изменяемым, и его можно менять.

#Так как элементы не индексируются, множество не поддерживают никаких операций среза и
#индексирования

# Существует два пути, следуя которым, мы можем создавать множества в Python.
#Мы можем создать множества путом передачи всех элементов множества внутри
#фигурных скобок {} и разделить элементы при помощи зяпятых(,).Множество
#может содержать любое количество элементов и элементы могут быть разных
#типов, к примеру, целые числа, строки, кортежи, и т.д .Однако, множества не
#поддерживают изменяемые элементы, такие как списки, словари и т.д

num_set = {1,2,3,4,5,6}
print(num_set)

#Только что мы создали множество чисел. Мы можеи создать множество из строк

string_set = {"яблоко","груша","персик","банан"}
print(string_set)

#Мы таже можем создать множество с элементами разных типов

mixed_set = {2.0,"hello",(1,2,3)}
print(mixed_set)
#все элементы в упомянутом выше множестве принадлежат разным питам

# Мы также можем создать множество из списков.Это можно сделать,вызвав встроенную функцию
#Python под названием set()

num_set = set([1,2,3,4,5,6])
print(num_set)

#Как упоминалось ранее, множества не содержат дубликаты элементов.
#Предложим, наш список содержит дубликат элементов, как показано ниже

num_set = set([1,2,3,1,2])
print(num_set)
#Множество удалило дубликаты и выдало только по одному экземпляру элементов.
#Это так же происходит при созании множества с нуля

num_set = {1,2,3,1,2}
print(num_set)

#создание пустого множества подразумевает определенную хитрость. Если вы
#используете пустые фигурные скобки{} в Python,вы скорее создадите пустой словарь, а не множества

x = {}  #как показанно в выдаче, тип переменной х является словарем
print(type(x))

#Чтобы создать пустое множество в Python, мы должны использовать функцию set()
#без передачи какого либо значения в параметрах, как показанно ниже

x = set()  # выдача поазывает, что мы создали множество
print(type(x))

#Python не предоставляет прямой способ получениня значенния к отдельным элементам
#множества. Однако, мы можем использовать цикл для итерации через все элементы множества

months = set(["jan","feb","march","apr","may","june","july","aug","sep","oct","nov","dec"])
for m in months:
    print(m)
#мы так же можем проверить наличие элементов во множестве при помощи in,как показано ниже

months = set(["jan","feb","march","apr","may","june","july","aug","sep","oct","nov","dec"])
print("may" in months) #код возвращает True,а это означает, что элемент был найден во множестве.
#аналагичным образом, при поискеэлемента, который образует во множестве, мы получим False

#Python позволяет нам вносить новые элементыво множество при помощи функиции add()

months = set(["jan","feb","march","apr","may","june","july","aug","sep","oct","nov","dec"])
months.add("feb")
print(months)

#Удаление элемента из множеств
num_set = {1,2,3,4,5,6,7}
num_set.discard(8) #метод не выдаст ошибку если поставить
print(num_set)

num_set = {1,2,3,4,5,6,7}
num_set.remove(3)
print(num_set)

num_set = {1,2,3,4,5,6,7}
num_set.pop()
print(num_set)

num_set = {1,2,3,4,5,6,7}
print(num_set.pop())
print(num_set)

num_set = {1,2,3,4,5,6,7}
num_set.clear()
print(num_set)


x = {1,2,3}
y = {4,5,6}
z = {7,8,9}

output = x.union(y,z)

print(output)

x = {1,2,3}
y = {4,5,6}
z = {7,8,9}
print(x| y| z)

#синтаксис
x = {1,2,3}
y = {4,5,6}

print(x & y)#результат :3

a = {1,2,3}
b = {4,3,6}

print(a-b)#Результат:1,2 если а отнять от б он выведет элементы а, которых нет в элементе б
print(b-a)#Результат:4,6 если б отнять от а он выведет элементы б, которых нет в элементе а

#метод copy

str_set = {"jan","feb","march","apr"}
x = str_set.copy()
print(x)


names_a = {"jan","feb","march","apr"}
print(len(names_a))# результат:4

# Frozenset
#Единственное отличие set от frozenset заключается в том,что

my_set = frozenset([1,2,3,-10,40])

print(type(my_set))

#ИСКЛЮЧЕНИЕ
a = 100/0
#Конструкция  try - except

try:
    k = 1/0
except ZeroDivisionError:
    k = 0

print(k)

try:
    k = 1/0
except ArithmeticError:
    k = 0

print(k)

#my_dick ={"a":1,"b":2,"c":3}
#try:
#value = my dick["d"]